#!/usr/bin/env php

<?php

require __DIR__ . '/vendor/autoload.php';

use BapCat\Interfaces\Persist\Directory;
use BapCat\Persist\Drivers\Filesystem\FilesystemDriver;
use BapCat\Tailor\Tailor;
use BapCat\Tailor\PersistViewFinder;

use Illuminate\View\Compilers\BladeCompiler;
use Illuminate\View\Engines\CompilerEngine;
use Illuminate\View\Engines\EngineResolver;
use Illuminate\View\Factory;

class Dispatcher implements Illuminate\Contracts\Events\Dispatcher {
  public function listen($events, $listener, $priority = 0) { }
  public function hasListeners($eventName) { }
  public function push($event, $payload = []) { }
  public function subscribe($subscriber) { }
  public function until($event, $payload = []) { }
  public function flush($event) { }
  public function fire($event, $payload = [], $halt = false) { }
  public function firing() { }
  public function forget($event) { }
  public function forgetPushed() { }
};

$persist = new FilesystemDriver(__DIR__ . '/storage');
$templates = $persist->get('templates');
$compiled  = $persist->get('compiled');

$finder = new PersistViewFinder($templates);
$resolver = new EngineResolver();
$factory = new Factory($resolver, $finder, new Dispatcher());

$blade = new BladeCompiler($templates->path, $compiled->path);

$resolver->register('blade', function() use($blade, $compiled, $templates) {
  return new CompilerEngine($compiled->path, $templates->path);
});

$tailor = new Tailor($factory, $templates, $compiled);

$test = new ASDD;
var_dump($test);
